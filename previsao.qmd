---
title: "Previsões"
execute: 
  echo: false
  panel: sidebar
---
:::{.panel-tabset}

## Gráficos
```{ojs}
d3 = require("d3@7")

// Dados e filtros
prev_comb = await FileAttachment('dados/dados1/previsoes_combinado.csv').csv()
prev_lm = await FileAttachment('dados/dados2/tabuas_lc.csv').csv() 
prev_lc = await FileAttachment('dados/dados2/tabuas_lm.csv').csv()

viewof sexo = Inputs.radio(["Ambos", "Homens", "Mulheres"], {label: "Sexo", value: "Homens"})

viewof regiao = Inputs.select([
  "Brasil",
  "Norte",
  "Nordeste",
  "Centro-Oeste",
  "Sudeste",
  "Sul",
  "Acre",
  "Alagoas",
  "Amapá",
  "Amazonas",
  "Bahia",
  "Ceará",
  "Distrito Federal",
  "Espírito Santo",
  "Goiás",
  "Maranhão",
  "Mato Grosso",
  "Mato Grosso do Sul",
  "Minas Gerais",
  "Pará",
  "Paraíba",
  "Paraná",
  "Pernambuco",
  "Piauí",
  "Rio de Janeiro",
  "Rio Grande do Norte",
  "Rio Grande do Sul",
  "Rondônia",
  "Roraima",
  "Santa Catarina",
  "São Paulo",
  "Sergipe",
  "Tocantins"],
  {
        value: ['Brasil'],
        label: "Local: "
    })

data_filter1 = prev_comb.filter(d => d.Local === regiao && d.Sexo === sexo).map(d => ({
  ano: +d.Ano,
  faixa: d.faixa_etaria,
  prev: Math.log(d.nMx_previsão)
}))

data_filter2 = prev_lm.filter(d => d.local === regiao && d.sexo === sexo).map(d => ({
  ano: +d.ano,
  faixa: d.faixa_etaria,
  prev: Math.log(d.mx_previsto)
}))

data_filter3 = prev_lc.filter(d => d.local === regiao && d.sexo === sexo).map(d => ({
  ano: +d.ano,
  faixa: d.faixa_etaria,
  prev: Math.log(d.mx_previsto)
}))

viewof qual = Inputs.checkbox(
  ['Combinado', 'Lee-Carter', 'Lee-Miler'], 
  {value: ['Combinado'], label: 'Modelos:'}
)

// Função principal para criar gráficos
function createChart(data, title) {
  const width = 800;
  const height = 550;
  const margin = {top: 30, right: 20, bottom: 40, left: 50};
  
  const svg = d3.create("svg")
    .attr("width", width)
    .attr("height", height)
    .attr("viewBox", [0, 0, width, height])
    .attr("style", "max-width: 100%; height: auto;");

  // Escalas
  const x = d3.scalePoint()
    .domain([...new Set(data.map(d => d.faixa))])
    .range([margin.left, width - margin.right])
    .padding(0.5);

  const y = d3.scaleLinear()
    .domain(d3.extent(data, d => d.prev)).nice()
    .range([height - margin.bottom, margin.top]);

  // Eixos
  svg.append("g")
    .attr("transform", `translate(0,${height - margin.bottom})`)
    .call(d3.axisBottom(x))
    .selectAll("text")
    .style("text-anchor", "end")
    .attr("dx", "-.8em")
    .attr("dy", ".15em")
    .attr("transform", "rotate(-45)");

  svg.append("g")
    .attr("transform", `translate(${margin.left},0)`)
    .call(d3.axisLeft(y).ticks(height / 40))
    .call(g => g.select(".domain").remove())
    .call(g => g.selectAll(".tick line").clone()
      .attr("x2", width - margin.left - margin.right)
      .attr("stroke-opacity", 0.1));

  // Gradiente e cores
  const colorScale = d3.scaleSequential(d3.interpolateViridis)
    .domain([2024, 2070]);

  const defs = svg.append("defs");
  const nestedData = d3.groups(data, d => d.ano);

  nestedData.forEach(([year, values]) => {
    const gradientId = `gradient-${title}-${year}`;
    
    const gradient = defs.append("linearGradient")
      .attr("id", gradientId)
      .attr("gradientUnits", "userSpaceOnUse")
      .attr("x1", margin.left)
      .attr("y1", 0)
      .attr("x2", width - margin.right)
      .attr("y2", 0);

    gradient.append("stop")
      .attr("offset", "0%")
      .attr("stop-color", colorScale(year));

    gradient.append("stop")
      .attr("offset", "100%")
      .attr("stop-color", colorScale(Math.min(year + 10, 2070)));
  });

  // Linhas
  const line = d3.line()
    .x(d => x(d.faixa))
    .y(d => y(d.prev));

  nestedData.forEach(([year, values]) => {
    svg.append("path")
      .datum(values)
      .attr("fill", "none")
      .attr("stroke", `url(#gradient-${title}-${year})`)
      .attr("stroke-width", 2.5)
      .attr("d", line);
  });

  // Legenda
  const legendWidth = 200;
  const legendHeight = 20;
  const legendX = width - margin.right - legendWidth;
  const legendY = margin.top;

  const legendGradient = defs.append("linearGradient")
    .attr("id", `legend-${title}`)
    .attr("x1", "0%")
    .attr("y1", "0%")
    .attr("x2", "100%")
    .attr("y2", "0%");

  const years = [2024, 2035, 2045, 2055, 2070];
  years.forEach((year, i) => {
    legendGradient.append("stop")
      .attr("offset", `${i * 100 / (years.length - 1)}%`)
      .attr("stop-color", colorScale(year));
  });

  svg.append("rect")
    .attr("x", legendX)
    .attr("y", legendY)
    .attr("width", legendWidth)
    .attr("height", legendHeight)
    .style("fill", `url(#legend-${title})`);

  svg.append("text")
    .attr("x", legendX)
    .attr("y", legendY - 5)
    .attr("font-size", "12px")
    .text("Anos (2024-2070)");

  years.forEach((year, i) => {
    svg.append("text")
      .attr("x", legendX + (i * legendWidth / (years.length - 1)))
      .attr("y", legendY + legendHeight + 15)
      .attr("text-anchor", "middle")
      .attr("font-size", "10px")
      .text(year);
  });

  // Título
  svg.append("text")
    .attr("x", width / 2)
    .attr("y", 20)
    .attr("text-anchor", "middle")
    .style("font-size", "1.2em")
    .text(title);

  return svg.node();
}

// Renderização dos gráficos
{
  const container = document.createElement('div');
  container.style.display = "grid";
  container.style.gap = "2rem";
  container.style.justifyContent = "center";

  if (qual.includes("Combinado")) {
    container.appendChild(createChart(data_filter1, "Combinado"));
  }
  if (qual.includes("Lee-Miler")) {
    container.appendChild(createChart(data_filter2, "Lee-Miller"));
  }
  if (qual.includes("Lee-Carter")) {
    container.appendChild(createChart(data_filter3, "Lee-Carter"));
  }

  return qual.length === 0 
    ? html`<p>Nenhum dado selecionado.</p>`
    : container;
}
```

## Dados

```{ojs}
Inputs.table(prev_comb)
html`
<body>
    <br>
    <p>Baixar 
    <a href="dados/dados1/tabuas_combinado.csv" download>
        dados.
    </a>
    </p>
</body>
`
Inputs.table(prev_lm)
html`
<body>
    <br>
    <p>Baixar 
    <a href="dados/dados2/tabuas_lm.csv" download>
        dados.
    </a>
    </p>
</body>
`
Inputs.table(prev_lc)
html`
<body>
    <br>
    <p>Baixar 
    <a href="dados/dados2/tabuas_lc.csv" download>
        dados.
    </a>
    </p>
</body>
`
```