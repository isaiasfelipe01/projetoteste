{"title":"Modelos","markdown":{"yaml":{"title":"Modelos","execute":{"echo":false,"panel":"sidebar"}},"headingText":"Modelos de previsão da taxa central de mortalidade","containsRefs":false,"markdown":"\n\n```{ojs}\nd3 = require(\"d3@7\")\n\n// Dados e filtros\nprev_comb = await FileAttachment('dados/dados1/previsoes_combinado.csv').csv()\nprev_lm = await FileAttachment('dados/dados2/tabuas_lc.csv').csv() \nprev_lc = await FileAttachment('dados/dados2/tabuas_lm.csv').csv()\n\nviewof sexo = Inputs.radio([\"Ambos\", \"Homens\", \"Mulheres\"], {label: \"Sexo\", value: \"Homens\"})\n\ndata_filter1 = prev_comb.filter(d => d.Local === 'Brasil' && d.Sexo === sexo).map(d => ({\n  ano: +d.Ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.nMx_previsão)\n}))\n\ndata_filter2 = prev_lm.filter(d => d.local === 'Brasil' && d.sexo === sexo).map(d => ({\n  ano: +d.ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.mx_previsto)\n}))\n\ndata_filter3 = prev_lc.filter(d => d.local === 'Brasil' && d.sexo === sexo).map(d => ({\n  ano: +d.ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.mx_previsto)\n}))\n\nviewof qual = Inputs.checkbox(\n  ['Combinado', 'Lee-Carter', 'Lee-Miler'], \n  {value: ['Combinado'], label: 'Modelos:'}\n)\n\n// Função principal para criar gráficos\nfunction createChart(data, title) {\n  const width = 800;\n  const height = 550;\n  const margin = {top: 30, right: 20, bottom: 40, left: 50};\n  \n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n  // Escalas\n  const x = d3.scalePoint()\n    .domain([...new Set(data.map(d => d.faixa))])\n    .range([margin.left, width - margin.right])\n    .padding(0.5);\n\n  const y = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.prev)).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n    .call(d3.axisBottom(x))\n    .selectAll(\"text\")\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.8em\")\n    .attr(\"dy\", \".15em\")\n    .attr(\"transform\", \"rotate(-45)\");\n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},0)`)\n    .call(d3.axisLeft(y).ticks(height / 40))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\").clone()\n      .attr(\"x2\", width - margin.left - margin.right)\n      .attr(\"stroke-opacity\", 0.1));\n\n  // Gradiente e cores\n  const colorScale = d3.scaleSequential(d3.interpolateViridis)\n    .domain([2024, 2070]);\n\n  const defs = svg.append(\"defs\");\n  const nestedData = d3.groups(data, d => d.ano);\n\n  nestedData.forEach(([year, values]) => {\n    const gradientId = `gradient-${title}-${year}`;\n    \n    const gradient = defs.append(\"linearGradient\")\n      .attr(\"id\", gradientId)\n      .attr(\"gradientUnits\", \"userSpaceOnUse\")\n      .attr(\"x1\", margin.left)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", width - margin.right)\n      .attr(\"y2\", 0);\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(year));\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(Math.min(year + 10, 2070)));\n  });\n\n  // Linhas\n  const line = d3.line()\n    .x(d => x(d.faixa))\n    .y(d => y(d.prev));\n\n  nestedData.forEach(([year, values]) => {\n    svg.append(\"path\")\n      .datum(values)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", `url(#gradient-${title}-${year})`)\n      .attr(\"stroke-width\", 2.5)\n      .attr(\"d\", line);\n  });\n\n  // Legenda\n  const legendWidth = 200;\n  const legendHeight = 20;\n  const legendX = width - margin.right - legendWidth;\n  const legendY = margin.top;\n\n  const legendGradient = defs.append(\"linearGradient\")\n    .attr(\"id\", `legend-${title}`)\n    .attr(\"x1\", \"0%\")\n    .attr(\"y1\", \"0%\")\n    .attr(\"x2\", \"100%\")\n    .attr(\"y2\", \"0%\");\n\n  const years = [2024, 2035, 2045, 2055, 2070];\n  years.forEach((year, i) => {\n    legendGradient.append(\"stop\")\n      .attr(\"offset\", `${i * 100 / (years.length - 1)}%`)\n      .attr(\"stop-color\", colorScale(year));\n  });\n\n  svg.append(\"rect\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY)\n    .attr(\"width\", legendWidth)\n    .attr(\"height\", legendHeight)\n    .style(\"fill\", `url(#legend-${title})`);\n\n  svg.append(\"text\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY - 5)\n    .attr(\"font-size\", \"12px\")\n    .text(\"Anos (2024-2070)\");\n\n  years.forEach((year, i) => {\n    svg.append(\"text\")\n      .attr(\"x\", legendX + (i * legendWidth / (years.length - 1)))\n      .attr(\"y\", legendY + legendHeight + 15)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .text(year);\n  });\n\n  // Título\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"1.2em\")\n    .text(title);\n\n  return svg.node();\n}\n\n// Renderização dos gráficos\n{\n  const container = document.createElement('div');\n  container.style.display = \"grid\";\n  container.style.gap = \"2rem\";\n  container.style.justifyContent = \"center\";\n\n  if (qual.includes(\"Combinado\")) {\n    container.appendChild(createChart(data_filter1, \"Combinado\"));\n  }\n  if (qual.includes(\"Lee-Miler\")) {\n    container.appendChild(createChart(data_filter2, \"Lee-Miller\"));\n  }\n  if (qual.includes(\"Lee-Carter\")) {\n    container.appendChild(createChart(data_filter3, \"Lee-Carter\"));\n  }\n\n  return qual.length === 0 \n    ? html`<p>Nenhum dado selecionado.</p>`\n    : container;\n}\n```","srcMarkdownNoYaml":"\n\n## Modelos de previsão da taxa central de mortalidade\n```{ojs}\nd3 = require(\"d3@7\")\n\n// Dados e filtros\nprev_comb = await FileAttachment('dados/dados1/previsoes_combinado.csv').csv()\nprev_lm = await FileAttachment('dados/dados2/tabuas_lc.csv').csv() \nprev_lc = await FileAttachment('dados/dados2/tabuas_lm.csv').csv()\n\nviewof sexo = Inputs.radio([\"Ambos\", \"Homens\", \"Mulheres\"], {label: \"Sexo\", value: \"Homens\"})\n\ndata_filter1 = prev_comb.filter(d => d.Local === 'Brasil' && d.Sexo === sexo).map(d => ({\n  ano: +d.Ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.nMx_previsão)\n}))\n\ndata_filter2 = prev_lm.filter(d => d.local === 'Brasil' && d.sexo === sexo).map(d => ({\n  ano: +d.ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.mx_previsto)\n}))\n\ndata_filter3 = prev_lc.filter(d => d.local === 'Brasil' && d.sexo === sexo).map(d => ({\n  ano: +d.ano,\n  faixa: d.faixa_etaria,\n  prev: Math.log(d.mx_previsto)\n}))\n\nviewof qual = Inputs.checkbox(\n  ['Combinado', 'Lee-Carter', 'Lee-Miler'], \n  {value: ['Combinado'], label: 'Modelos:'}\n)\n\n// Função principal para criar gráficos\nfunction createChart(data, title) {\n  const width = 800;\n  const height = 550;\n  const margin = {top: 30, right: 20, bottom: 40, left: 50};\n  \n  const svg = d3.create(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n    .attr(\"viewBox\", [0, 0, width, height])\n    .attr(\"style\", \"max-width: 100%; height: auto;\");\n\n  // Escalas\n  const x = d3.scalePoint()\n    .domain([...new Set(data.map(d => d.faixa))])\n    .range([margin.left, width - margin.right])\n    .padding(0.5);\n\n  const y = d3.scaleLinear()\n    .domain(d3.extent(data, d => d.prev)).nice()\n    .range([height - margin.bottom, margin.top]);\n\n  // Eixos\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n    .call(d3.axisBottom(x))\n    .selectAll(\"text\")\n    .style(\"text-anchor\", \"end\")\n    .attr(\"dx\", \"-.8em\")\n    .attr(\"dy\", \".15em\")\n    .attr(\"transform\", \"rotate(-45)\");\n\n  svg.append(\"g\")\n    .attr(\"transform\", `translate(${margin.left},0)`)\n    .call(d3.axisLeft(y).ticks(height / 40))\n    .call(g => g.select(\".domain\").remove())\n    .call(g => g.selectAll(\".tick line\").clone()\n      .attr(\"x2\", width - margin.left - margin.right)\n      .attr(\"stroke-opacity\", 0.1));\n\n  // Gradiente e cores\n  const colorScale = d3.scaleSequential(d3.interpolateViridis)\n    .domain([2024, 2070]);\n\n  const defs = svg.append(\"defs\");\n  const nestedData = d3.groups(data, d => d.ano);\n\n  nestedData.forEach(([year, values]) => {\n    const gradientId = `gradient-${title}-${year}`;\n    \n    const gradient = defs.append(\"linearGradient\")\n      .attr(\"id\", gradientId)\n      .attr(\"gradientUnits\", \"userSpaceOnUse\")\n      .attr(\"x1\", margin.left)\n      .attr(\"y1\", 0)\n      .attr(\"x2\", width - margin.right)\n      .attr(\"y2\", 0);\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"0%\")\n      .attr(\"stop-color\", colorScale(year));\n\n    gradient.append(\"stop\")\n      .attr(\"offset\", \"100%\")\n      .attr(\"stop-color\", colorScale(Math.min(year + 10, 2070)));\n  });\n\n  // Linhas\n  const line = d3.line()\n    .x(d => x(d.faixa))\n    .y(d => y(d.prev));\n\n  nestedData.forEach(([year, values]) => {\n    svg.append(\"path\")\n      .datum(values)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", `url(#gradient-${title}-${year})`)\n      .attr(\"stroke-width\", 2.5)\n      .attr(\"d\", line);\n  });\n\n  // Legenda\n  const legendWidth = 200;\n  const legendHeight = 20;\n  const legendX = width - margin.right - legendWidth;\n  const legendY = margin.top;\n\n  const legendGradient = defs.append(\"linearGradient\")\n    .attr(\"id\", `legend-${title}`)\n    .attr(\"x1\", \"0%\")\n    .attr(\"y1\", \"0%\")\n    .attr(\"x2\", \"100%\")\n    .attr(\"y2\", \"0%\");\n\n  const years = [2024, 2035, 2045, 2055, 2070];\n  years.forEach((year, i) => {\n    legendGradient.append(\"stop\")\n      .attr(\"offset\", `${i * 100 / (years.length - 1)}%`)\n      .attr(\"stop-color\", colorScale(year));\n  });\n\n  svg.append(\"rect\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY)\n    .attr(\"width\", legendWidth)\n    .attr(\"height\", legendHeight)\n    .style(\"fill\", `url(#legend-${title})`);\n\n  svg.append(\"text\")\n    .attr(\"x\", legendX)\n    .attr(\"y\", legendY - 5)\n    .attr(\"font-size\", \"12px\")\n    .text(\"Anos (2024-2070)\");\n\n  years.forEach((year, i) => {\n    svg.append(\"text\")\n      .attr(\"x\", legendX + (i * legendWidth / (years.length - 1)))\n      .attr(\"y\", legendY + legendHeight + 15)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"font-size\", \"10px\")\n      .text(year);\n  });\n\n  // Título\n  svg.append(\"text\")\n    .attr(\"x\", width / 2)\n    .attr(\"y\", 20)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"1.2em\")\n    .text(title);\n\n  return svg.node();\n}\n\n// Renderização dos gráficos\n{\n  const container = document.createElement('div');\n  container.style.display = \"grid\";\n  container.style.gap = \"2rem\";\n  container.style.justifyContent = \"center\";\n\n  if (qual.includes(\"Combinado\")) {\n    container.appendChild(createChart(data_filter1, \"Combinado\"));\n  }\n  if (qual.includes(\"Lee-Miler\")) {\n    container.appendChild(createChart(data_filter2, \"Lee-Miller\"));\n  }\n  if (qual.includes(\"Lee-Carter\")) {\n    container.appendChild(createChart(data_filter3, \"Lee-Carter\"));\n  }\n\n  return qual.length === 0 \n    ? html`<p>Nenhum dado selecionado.</p>`\n    : container;\n}\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"panel":"sidebar","engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"modelos.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","theme":"cosmo","title":"Modelos"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}