---
title: "Dados de Mortalidade"
execute: 
  echo: false
  panel: sidebar
---


```{ojs}
d3 = require("d3@7")

data = await FileAttachment("dados/dados2/erros.csv").csv()
tabua_comb = await FileAttachment("dados/dados1/previsoes_combinado.csv").csv()

data_filter = data.filter(
    d => d.faixa_etaria === '0' && d.regiao === 'Brasil' && d.taxa === 'Total'
)


html`
<p style="text-align: justify;">Aqui, você encontrará um conjunto de dados detalhados sobre mortalidade dividido entre: Brasil, Regiões e Estados, combinando informações reais extraídas do Instituto Brasileiro de Geografia e Estatística (IBGE) com projeções e análises desenvolvidas por nossa equipe.</p>
<p style="text-align: justify;">Nosso objetivo é oferecer uma visão clara e acessível sobre a evolução dos padrões de mortalidade, permitindo comparações entre os dados históricos e nossas estimativas futuras. Utilizamos modelos estatísticos e atuariais para gerar previsões que podem ser aplicadas em diversas áreas, como seguros, previdência, saúde pública e planejamento estratégico.</p>
<p style="text-align: justify;">Explore nossos gráficos interativos e relatórios para entender melhor as tendências e impactos da longevidade no Brasil.</p>
`
```


## Taxa central de mortalidade de 2000 à 2023 para os modelos de Lee-Miler e Lee-Carter

```{ojs}
viewof qual = Inputs.checkbox(['Lee-Carter', 'Lee-Miler', 'Observado'], {value: ['Lee-Miler', 'Lee-Carter', 'Observado'], label: 'Modelos:'}) 

viewof regiao = Inputs.select([
  "Brasil",
  "Norte",
  "Nordeste",
  "Centro-Oeste",
  "Sudeste",
  "Sul",
  "Acre",
  "Alagoas",
  "Amapá",
  "Amazonas",
  "Bahia",
  "Ceará",
  "Distrito Federal",
  "Espírito Santo",
  "Goiás",
  "Maranhão",
  "Mato Grosso",
  "Mato Grosso do Sul",
  "Minas Gerais",
  "Pará",
  "Paraíba",
  "Paraná",
  "Pernambuco",
  "Piauí",
  "Rio de Janeiro",
  "Rio Grande do Norte",
  "Rio Grande do Sul",
  "Rondônia",
  "Roraima",
  "Santa Catarina",
  "São Paulo",
  "Sergipe",
  "Tocantins"],
  {
        value: ['Brasil'],
        label: "Local: "
    })

html`
<div class="grafico-container">
  <!-- Legenda HTML -->
  <div class="legenda">
    <div class="legenda-item">
      <div class="cor-marcador" style="background: steelblue"></div>
      <span>Observado</span>
    </div>
    <div class="legenda-item">
      <div class="cor-marcador" style="background: darkorange"></div>
      <span>Modelo LC</span>
    </div>
    <div class="legenda-item">
      <div class="cor-marcador" style="background: green"></div>
      <span>Modelo LM</span>
    </div>
  </div>

  <!-- Container do gráfico SVG será injetado aqui -->
  <div id="grafico"></div>
</div>

<style>
.grafico-container {
  max-width: 800px;
  margin: 0 auto;
  font-family: sans-serif;
}

.legenda {
  display: flex;
  gap: 1.5rem;
  justify-content: center;
  margin-bottom: 1.5rem;
}

.legenda-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.25rem 0.75rem;
  background: #f5f5f5;
  border-radius: 1rem;
}

.cor-marcador {
  width: 12px;
  height: 12px;
  border-radius: 50%;
}

</style>
`

```


```{ojs}
function lm_lc(){
  //lm e lc
  {
    const width = 800;
    const height = 650;
    const margin = { top: 30, right: 20, bottom: 40, left: 50 };
    const numRows = 5;
    const numCols = 4;
    
    // Cores para cada série
    const cores = {
      mx_lc: "darkorange",
      mx_lm: "green"
    };

    const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

    const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
    
    const subplotWidth = width / numCols;
    const subplotHeight = height / numRows;

    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const index = row * numCols + col;
        if (index >= ageGroups.length) continue;
        
        const currentAge = ageGroups[index];
        const subplot = svg.append("g")
          .attr("transform", `translate(${col * subplotWidth}, ${row * subplotHeight})`);
        
        // Processamento dos dados
        const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_lc: Math.log(+d.mx_lc), // Adiciona transformação
          mx_lm: Math.log(+d.mx_lm)  // Adiciona transformação
        })).sort((a, b) => a.ano - b.ano);
        
        // Escalas atualizadas
        const xScale = d3.scaleLinear()
          .domain(d3.extent(filteredData, d => d.ano))
          .range([margin.left, subplotWidth - margin.right]);

        const yValues = filteredData.flatMap(d => [ d.mx_lc, d.mx_lm]);
        const yScale = d3.scaleLinear()
          .domain([d3.min(yValues), d3.max(yValues)]).nice()
          .range([subplotHeight - margin.bottom, margin.top]);
        
        // Eixos
        subplot.append("g")
          .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(5));

        subplot.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale).ticks(5));

        // Função para gerar linhas
        const gerarLinha = (variavel, cor) => {
          const linha = d3.line()
            .x(d => xScale(d.ano))
            .y(d => yScale(d[variavel]));
          
          subplot.append("path")
            .datum(filteredData)
            .attr("d", linha)
            .attr("fill", "none")
            .attr("stroke", cor)
            .attr("stroke-width", 2);
        };

        // Adiciona as três linhas
        gerarLinha("mx_real", cores.mx_real);
        gerarLinha("mx_lc", cores.mx_lc);
        gerarLinha("mx_lm", cores.mx_lm);
        
        // Título
        subplot.append("text")
          .attr("x", margin.left)
          .attr("y", margin.top)
          .text(`Faixa: ${currentAge}`)
          .attr("font-size", "12px")
          .attr("font-weight", "bold");
      }
      
    }

    return svg.node();
  }
}

function real_lm(){
  //real e lm
  {
    const width = 800;
    const height = 650;
    const margin = { top: 30, right: 20, bottom: 40, left: 50 };
    const numRows = 5;
    const numCols = 4;
    
    // Cores para cada série
    const cores = {
      mx_real: "steelblue",
      mx_lm: "green"
    };

    const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

    const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
    
    const subplotWidth = width / numCols;
    const subplotHeight = height / numRows;

    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const index = row * numCols + col;
        if (index >= ageGroups.length) continue;
        
        const currentAge = ageGroups[index];
        const subplot = svg.append("g")
          .attr("transform", `translate(${col * subplotWidth}, ${row * subplotHeight})`);
        
        // Processamento dos dados
        const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_real: Math.log(+d.mx_real),
          mx_lm: Math.log(+d.mx_lm)  // Adiciona transformação
        })).sort((a, b) => a.ano - b.ano);
        
        // Escalas atualizadas
        const xScale = d3.scaleLinear()
          .domain(d3.extent(filteredData, d => d.ano))
          .range([margin.left, subplotWidth - margin.right]);

        const yValues = filteredData.flatMap(d => [d.mx_real, d.mx_lm]);
        const yScale = d3.scaleLinear()
          .domain([d3.min(yValues), d3.max(yValues)]).nice()
          .range([subplotHeight - margin.bottom, margin.top]);
        
        // Eixos
        subplot.append("g")
          .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(5));

        subplot.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale).ticks(5));

        // Função para gerar linhas
        const gerarLinha = (variavel, cor) => {
          const linha = d3.line()
            .x(d => xScale(d.ano))
            .y(d => yScale(d[variavel]));
          
          subplot.append("path")
            .datum(filteredData)
            .attr("d", linha)
            .attr("fill", "none")
            .attr("stroke", cor)
            .attr("stroke-width", 2);
        };

        // Adiciona as três linhas
        gerarLinha("mx_real", cores.mx_real);
        gerarLinha("mx_lm", cores.mx_lm);
        
        // Título
        subplot.append("text")
          .attr("x", margin.left)
          .attr("y", margin.top)
          .text(`Faixa: ${currentAge}`)
          .attr("font-size", "12px")
          .attr("font-weight", "bold");
      }
      
    }

    return svg.node();
  }
}

function real_lc(){
  //real e lc
  {
    const width = 800;
    const height = 650;
    const margin = { top: 30, right: 20, bottom: 40, left: 50 };
    const numRows = 5;
    const numCols = 4;
    
    // Cores para cada série
    const cores = {
      mx_real: "steelblue",
      mx_lc: "darkorange",
    };

    const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

    const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
    
    const subplotWidth = width / numCols;
    const subplotHeight = height / numRows;

    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const index = row * numCols + col;
        if (index >= ageGroups.length) continue;
        
        const currentAge = ageGroups[index];
        const subplot = svg.append("g")
          .attr("transform", `translate(${col * subplotWidth}, ${row * subplotHeight})`);
        
        // Processamento dos dados
        const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_real: Math.log(+d.mx_real),
          mx_lc: Math.log(+d.mx_lc), // Adiciona transformação
        })).sort((a, b) => a.ano - b.ano);
        
        // Escalas atualizadas
        const xScale = d3.scaleLinear()
          .domain(d3.extent(filteredData, d => d.ano))
          .range([margin.left, subplotWidth - margin.right]);

        const yValues = filteredData.flatMap(d => [d.mx_real, d.mx_lc]);
        const yScale = d3.scaleLinear()
          .domain([d3.min(yValues), d3.max(yValues)]).nice()
          .range([subplotHeight - margin.bottom, margin.top]);
        
        // Eixos
        subplot.append("g")
          .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(5));

        subplot.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale).ticks(5));

        // Função para gerar linhas
        const gerarLinha = (variavel, cor) => {
          const linha = d3.line()
            .x(d => xScale(d.ano))
            .y(d => yScale(d[variavel]));
          
          subplot.append("path")
            .datum(filteredData)
            .attr("d", linha)
            .attr("fill", "none")
            .attr("stroke", cor)
            .attr("stroke-width", 2);
        };

        // Adiciona as três linhas
        gerarLinha("mx_real", cores.mx_real);
        gerarLinha("mx_lc", cores.mx_lc);
        
        // Título
        subplot.append("text")
          .attr("x", margin.left)
          .attr("y", margin.top)
          .text(`Faixa: ${currentAge}`)
          .attr("font-size", "12px")
          .attr("font-weight", "bold");
      }
      
    }

    return svg.node();
  }
}



function todos(){
  //todos
  {
    const width = 800;
    const height = 650;
    const margin = { top: 30, right: 20, bottom: 40, left: 50 };
    const numRows = 5;
    const numCols = 4;
    
    // Cores para cada série
    const cores = {
      mx_real: "steelblue",
      mx_lc: "darkorange",
      mx_lm: "green"
    };

    const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

    const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
    
    const subplotWidth = width / numCols;
    const subplotHeight = height / numRows;

    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const index = row * numCols + col;
        if (index >= ageGroups.length) continue;
        
        const currentAge = ageGroups[index];
        const subplot = svg.append("g")
          .attr("transform", `translate(${col * subplotWidth}, ${row * subplotHeight})`);
        
        // Processamento dos dados
        const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_real: Math.log(+d.mx_real),
          mx_lc: Math.log(+d.mx_lc), // Adiciona transformação
          mx_lm: Math.log(+d.mx_lm)  // Adiciona transformação
        })).sort((a, b) => a.ano - b.ano);
        
        // Escalas atualizadas
        const xScale = d3.scaleLinear()
          .domain(d3.extent(filteredData, d => d.ano))
          .range([margin.left, subplotWidth - margin.right]);

        const yValues = filteredData.flatMap(d => [d.mx_real, d.mx_lc, d.mx_lm]);
        const yScale = d3.scaleLinear()
          .domain([d3.min(yValues), d3.max(yValues)]).nice()
          .range([subplotHeight - margin.bottom, margin.top]);
        
        // Eixos
        subplot.append("g")
          .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(5));

        subplot.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale).ticks(5));

        // Função para gerar linhas
        const gerarLinha = (variavel, cor) => {
          const linha = d3.line()
            .x(d => xScale(d.ano))
            .y(d => yScale(d[variavel]));
          
          subplot.append("path")
            .datum(filteredData)
            .attr("d", linha)
            .attr("fill", "none")
            .attr("stroke", cor)
            .attr("stroke-width", 2);
        };

        // Adiciona as três linhas
        gerarLinha("mx_real", cores.mx_real);
        gerarLinha("mx_lc", cores.mx_lc);
        gerarLinha("mx_lm", cores.mx_lm);
        
        // Título
        subplot.append("text")
          .attr("x", margin.left)
          .attr("y", margin.top)
          .text(`Faixa: ${currentAge}`)
          .attr("font-size", "12px")
          .attr("font-weight", "bold");
      }
      
    }

    return svg.node();
  }
}

//real
function real(){
  {
    const width = 800;
    const height = 750;
    const margin = { top: 30, right: 20, bottom: 40, left: 50 };
    const numRows = 5;
    const numCols = 4;
    
    // Criação do SVG principal
    const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

    // Extrai faixas etárias únicas e ordena
    const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
    
    // Calcula dimensões dos subplots
    const subplotWidth = width / numCols;
    const subplotHeight = height / numRows;

    // Criação dos subplots
    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const index = row * numCols + col;
        if (index >= ageGroups.length) continue;
        
        const currentAge = ageGroups[index];
        const subplot = svg.append("g")
          .attr("transform", `translate(${col * subplotWidth}, ${row * subplotHeight})`);
        
        // Filtra dados para a faixa etária atual
        const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_real: Math.log(+d.mx_real)
        }));
        
        // Configura escalas
        const xScale = d3.scaleLinear()
          .domain(d3.extent(filteredData, d => d.ano))
          .range([margin.left, subplotWidth - margin.right]);
        
        const yScale = d3.scaleLinear()
          .domain([d3.min(filteredData, d => d.mx_real), d3.max(filteredData, d => d.mx_real)]).nice()
          .range([subplotHeight - margin.bottom, margin.top]);
        
        // Adiciona eixos
        subplot.append("g")
          .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(5));
        
        subplot.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale).ticks(5));
        
        // Adiciona linha
        const line = d3.line()
          .x(d => xScale(d.ano))
          .y(d => yScale(d.mx_real));
        
        subplot.append("path")
          .datum(filteredData.sort((a, b) => a.ano - b.ano))
          .attr("d", line)
          .attr("fill", "none")
          .attr("stroke", "steelblue")
          .attr("stroke-width", 2);
        
        // Adiciona título
        subplot.append("text")
          .attr("x", margin.left)
          .attr("y", margin.top)
          .text(`Faixa: ${currentAge}`)
          .attr("font-size", "12px")
          .attr("font-weight", "bold", "center");
      }
    }

    return svg.node();
  }
}

//mx_lm
function mx_lm(){
  {
    const width = 800;
    const height = 650;
    const margin = { top: 30, right: 20, bottom: 40, left: 50 };
    const numRows = 5;
    const numCols = 4;
    
    // Criação do SVG principal
    const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

    // Extrai faixas etárias únicas e ordena
    const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
    
    // Calcula dimensões dos subplots
    const subplotWidth = width / numCols;
    const subplotHeight = height / numRows;

    // Criação dos subplots
    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const index = row * numCols + col;
        if (index >= ageGroups.length) continue;
        
        const currentAge = ageGroups[index];
        const subplot = svg.append("g")
          .attr("transform", `translate(${col * subplotWidth}, ${row * subplotHeight})`);
        
        // Filtra dados para a faixa etária atual
        const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_lm: Math.log(+d.mx_lm)
        }));
        
        // Configura escalas
        const xScale = d3.scaleLinear()
          .domain(d3.extent(filteredData, d => d.ano))
          .range([margin.left, subplotWidth - margin.right]);
        
        const yScale = d3.scaleLinear()
          .domain([d3.min(filteredData, d => d.mx_lm), d3.max(filteredData, d => d.mx_lm)]).nice()
          .range([subplotHeight - margin.bottom, margin.top]);
        
        // Adiciona eixos
        subplot.append("g")
          .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(5));
        
        subplot.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale).ticks(5));
        
        // Adiciona linha
        const line = d3.line()
          .x(d => xScale(d.ano))
          .y(d => yScale(d.mx_lm));
        
        subplot.append("path")
          .datum(filteredData.sort((a, b) => a.ano - b.ano))
          .attr("d", line)
          .attr("fill", "none")
          .attr("stroke", "green")
          .attr("stroke-width", 2);
        
        // Adiciona título
        subplot.append("text")
          .attr("x", margin.left)
          .attr("y", margin.top)
          .text(`Faixa: ${currentAge}`)
          .attr("font-size", "12px")
          .attr("font-weight", "bold", "center");
      }
    }

    return svg.node();
  }
}

//mx_lc
function mx_lc(){
  {
    const width = 800;
    const height = 650;
    const margin = { top: 30, right: 20, bottom: 40, left: 50 };
    const numRows = 5;
    const numCols = 4;
    
    // Criação do SVG principal
    const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height);

    // Extrai faixas etárias únicas e ordena
    const ageGroups = [...new Set(data.map(d => d.faixa_etaria))].sort();
    
    // Calcula dimensões dos subplots
    const subplotWidth = width / numCols;
    const subplotHeight = height / numRows;

    // Criação dos subplots
    for (let row = 0; row < numRows; row++) {
      for (let col = 0; col < numCols; col++) {
        const index = row * numCols + col;
        if (index >= ageGroups.length) continue;
        
        const currentAge = ageGroups[index];
        const subplot = svg.append("g")
          .attr("transform", `translate(${col * subplotWidth}, ${row * subplotHeight})`);
        
        // Filtra dados para a faixa etária atual
        const filteredData = data.filter(d => 
          d.faixa_etaria === currentAge && 
          d.regiao === regiao && 
          d.taxa === 'Total'
        ).map(d => ({
          ...d,
          ano: +d.ano,
          mx_lc: Math.log(+d.mx_lc)
        }));
        
        // Configura escalas
        const xScale = d3.scaleLinear()
          .domain(d3.extent(filteredData, d => d.ano))
          .range([margin.left, subplotWidth - margin.right]);
        
        const yScale = d3.scaleLinear()
          .domain([d3.min(filteredData, d => d.mx_lc), d3.max(filteredData, d => d.mx_lc)]).nice()
          .range([subplotHeight - margin.bottom, margin.top]);
        
        // Adiciona eixos
        subplot.append("g")
          .attr("transform", `translate(0, ${subplotHeight - margin.bottom})`)
          .call(d3.axisBottom(xScale).ticks(5));
        
        subplot.append("g")
          .attr("transform", `translate(${margin.left}, 0)`)
          .call(d3.axisLeft(yScale).ticks(5));
        
        // Adiciona linha
        const line = d3.line()
          .x(d => xScale(d.ano))
          .y(d => yScale(d.mx_lc));
        
        subplot.append("path")
          .datum(filteredData.sort((a, b) => a.ano - b.ano))
          .attr("d", line)
          .attr("fill", "none")
          .attr("stroke", "darkorange")
          .attr("stroke-width", 2);
        
        // Adiciona título
        subplot.append("text")
          .attr("x", margin.left)
          .attr("y", margin.top)
          .text(`Faixa: ${currentAge}`)
          .attr("font-size", "12px")
          .attr("font-weight", "bold", "center");
      }
    }

    return svg.node();
  }
}
```

```{ojs}
totalSelecionado = qual.length;
rea = qual.includes("Observado")
lm = qual.includes("Lee-Miler")
lc = qual.includes("Lee-Carter")

{
  if(totalSelecionado === 1 ){
    if (rea) return real();
    if (lm) return mx_lm();
    if (lc) return mx_lc();
  }else if (totalSelecionado === 3){
    return todos()
  }else if (totalSelecionado === 2){
    if (rea && lm) return real_lm();
    if (rea && lc) return real_lc();
    if (lm && lc) return lm_lc();
  }else if (totalSelecionado == 0){
    return html`<p>Nenhum dado selecionado.</p>`
  }

}
```